diff --git a/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withContent.js b/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withContent.js
index d68a306..410b86c 100644
--- a/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withContent.js
+++ b/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withContent.js
@@ -8,13 +8,17 @@ if (typeof window !== 'undefined') {
  * @param context
  */
 export const withContent = async (context) => {
+    console.log('>> withContent mode', context.res.getHeader('X-Mosaic-Mode'));
     if (context.res.getHeader('X-Mosaic-Mode') !== 'active') {
         return {};
     }
+    
     const { resolvedUrl } = context;
     try {
         const mosaicUrl = context.res.getHeader('X-Mosaic-Content-Url');
+        console.log('>> withContent mosaicUrl', mosaicUrl);
         const req = await fetch(`${mosaicUrl}${resolvedUrl}`);
+        console.log('>> fetch ', `${mosaicUrl}${resolvedUrl}`);
         if (req.ok) {
             const contentType = req.headers.get('content-type');
             if (contentType && contentType.includes('/mdx')) {
diff --git a/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withMosaicMode.js b/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withMosaicMode.js
index 54955ae..0065b81 100644
--- a/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withMosaicMode.js
+++ b/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withMosaicMode.js
@@ -10,6 +10,7 @@ export const withMosaicMode = async (context) => {
     const mosaicContentUrl = process.env[`MOSAIC_${mode.toUpperCase()}_MODE_URL`] || '';
     context.res.setHeader('X-Mosaic-Mode', mode);
     context.res.setHeader('X-Mosaic-Content-Url', mosaicContentUrl);
+    console.log('>> withMosaicMode', mode, mosaicContentUrl)
     return { props: { mode } };
 };
 //# sourceMappingURL=withMosaicMode.js.map
diff --git a/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withStaticContent.js b/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withStaticContent.js
index 2fe6f0f..49a8a00 100644
--- a/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withStaticContent.js
+++ b/node_modules/@jpmorganchase/mosaic-site-middleware/dist/withStaticContent.js
@@ -8,13 +8,18 @@ import MiddlewareError from './MiddlewareError.js';
  */
 export const withStaticContent = async (context) => {
     const { resolvedUrl, res } = context;
+    console.log('>> resolvedURL', resolvedUrl);
     const isStatic = res.getHeader('X-Mosaic-Mode') === 'static';
+    console.log('>> isStatic', isStatic);
     if (!isStatic) {
         return {};
     }
     const mosaicSnapshotDir = process.env.MOSAIC_SNAPSHOT_DIR || '';
+    console.log('>> process.cwd()', process.cwd());
+    
     // Find the absolute path for  the file/dir requested
     const filePath = path.posix.join(process.cwd(), mosaicSnapshotDir, resolvedUrl);
+    console.log('>> filePath', filePath);
     try {
         const realPath = await fs.promises.realpath(filePath);
         const extname = path.extname(realPath);
@@ -22,10 +27,13 @@ export const withStaticContent = async (context) => {
             const data = await fs.promises.readFile(filePath, 'utf-8');
             const text = data.toString();
             const mdxSource = await compileMDX(text);
+            console.log('>> text', text);
+
             return { props: { type: 'mdx', source: mdxSource, raw: text } };
         }
     }
     catch (error) {
+        console.log('>> thrown in middleware', error);
         if (error instanceof Error) {
             console.error(error.message);
             throw new MiddlewareError(500, resolvedUrl, [error.message], { show500: true });
diff --git a/node_modules/@jpmorganchase/mosaic-site-middleware/src/withStaticContent.ts b/node_modules/@jpmorganchase/mosaic-site-middleware/src/withStaticContent.ts
index 60c3c35..fac4a82 100644
--- a/node_modules/@jpmorganchase/mosaic-site-middleware/src/withStaticContent.ts
+++ b/node_modules/@jpmorganchase/mosaic-site-middleware/src/withStaticContent.ts
@@ -21,6 +21,7 @@ export const withStaticContent: MosaicMiddleware<ContentProps> = async context =
   // Find the absolute path for  the file/dir requested
   const filePath = path.posix.join(process.cwd(), mosaicSnapshotDir, resolvedUrl);
 
+  
   try {
     const realPath = await fs.promises.realpath(filePath);
     const extname = path.extname(realPath);
